(if_else(
is.na(del_dose_total) | del_dose_total == 0,
NA_real_,
((del_dose_total * 0.9) - adm_td)
))))%>%
mutate(pu_del_rem_per = pu_del_rem / a_pop)
## Calculate percent of doses received utilized
a_data <- a_data %>%
mutate(pu_del_rem_prop = if_else(
pu_del_rem > 0,
(pu_del_rem / del_dose_total),
if_else(
is.na(pu_del_rem) | pu_del_rem == 0,
NA_real_,
if_else(pu_del_rem <= 0, 0,
NA_real_)
)
)) %>%
mutate(pu_used_per = 1 - pu_del_rem_prop)
## Assign percent utilization categories
a_data <- a_data %>%
mutate(pu_used_per_cat = if_else(
pu_used_per < 0.25,
"0) <25%",
if_else(
pu_used_per < 0.5,
"1) 25-49%",
if_else(
pu_used_per < 0.75,
"2) 50-74%",
if_else(pu_used_per <= 1, "3) 75-100%",
NA_character_)
)
)
))
# Calculate supply secured not yet delivered, supply received not yet administered
a_data <- a_data %>%
mutate(sec_tobedel = if_else((sec_total - del_cour_total) < 0, 0, (sec_total - del_cour_total))) %>%
mutate(sec_tobedel_per = sec_tobedel / a_pop) %>%
mutate(rem_cour_del = del_cour_total - del_cour_wast - adm_fv_homo) %>%
mutate(rem_cour_del_per = rem_cour_del / a_pop) %>%
mutate(rem_cour_del_prop = rem_cour_del / del_cour_total)
# Calculate proportions of courses of total
a_data <- a_data %>%
mutate(sec_del_prop = del_cour_total / sec_total)
# Calculate if courses secured, received, and administered sufficient to reach targets
a_data <- a_data %>%
mutate(t20_suff_sec = if_else(sec_total_per >= 0.2, "Yes", "No")) %>%
mutate(t20_suff_del = if_else(del_cour_total_per >= 0.2, "Yes", "No")) %>%
mutate(t40_suff_sec = if_else(sec_total_per >= 0.4, "Yes", "No")) %>%
mutate(t40_suff_del = if_else(del_cour_total_per >= 0.4, "Yes", "No")) %>%
mutate(t70_suff_sec = if_else(sec_total_per >= 0.7, "Yes", "No")) %>%
mutate(t70_suff_del = if_else(del_cour_total_per >= 0.7, "Yes", "No"))
# Calculate absolute courses needed for reach targets
a_data <- a_data %>%
mutate(t20_cour_req = round((a_pop * 0.2) * 1.1)) %>%
mutate(t40_cour_req = round((a_pop * 0.4) * 1.1)) %>%
mutate(t70_cour_req = round((a_pop * 0.7) * 1.1))
# Calculate remaining secured, received, and admnistered courses required for targets
a_data <- a_data %>%
mutate(t20_cour_need_sec = round(if_else((t20_cour_req - sec_total) < 0, 0,
(t20_cour_req - sec_total)))) %>%
mutate(t20_cour_need_del = round(if_else((t20_cour_req - del_cour_total) < 0, 0,
(t20_cour_req - del_cour_total)))) %>%
mutate(t20_cour_need_adm = round(if_else((t20_cour_req - adm_fv_homo) < 0, 0,
(t20_cour_req - adm_fv_homo)))) %>%
mutate(t40_cour_need_sec = round(if_else((t40_cour_req - sec_total) < 0, 0,
(t40_cour_req - sec_total)))) %>%
mutate(t40_cour_need_del = round(if_else((t40_cour_req - del_cour_total) < 0, 0,
(t40_cour_req - del_cour_total)))) %>%
mutate(t40_cour_need_adm = round(if_else((t40_cour_req - adm_fv_homo) < 0, 0,
(t40_cour_req - adm_fv_homo)))) %>%
mutate(t70_cour_need_sec = round(if_else((t70_cour_req - sec_total) < 0, 0,
(t70_cour_req - sec_total)))) %>%
mutate(t70_cour_need_del = round(if_else((t70_cour_req - del_cour_total) < 0,
0,
(t70_cour_req - del_cour_total)
))) %>%
mutate(t70_cour_need_adm = round(if_else((t70_cour_req - adm_fv_homo) < 0, 0,
(t70_cour_req - adm_fv_homo))))
# Merge IMR Smartsheet data
a_data <-
left_join(a_data, c_smartsheet_red, by = c("a_iso" = "iso"))
# Calculate progress against country coverage targets
a_data <- a_data %>%
mutate(ndvp_goalmet = if_else(cov_total_fv >= ndvp_target, "Yes", "No")) %>%
mutate(ndvp_peratpace = (adm_fv_homo + (
dvr_4wk_fv * as.numeric(as.Date(ndvp_deadline) - Sys.Date())
) / a_pop)) %>%
mutate(ndvp_willmeet = if_else(ndvp_peratpace >= ndvp_target, "Yes", "No")) %>%
mutate(ndvp_timeto = round(if_else((((
ndvp_target * a_pop
) - adm_fv_homo) / (dvr_4wk_fv)) < 0 , 0,
if_else(is.infinite((((ndvp_target * a_pop) - adm_fv_homo) / (dvr_4wk_fv)
)), NA_real_,
(((ndvp_target * a_pop) - adm_fv_homo) / (dvr_4wk_fv)
))))) %>%
mutate(ndvp_ontrack = if_else(ndvp_goalmet != "Yes" &
ndvp_willmeet == "Yes", "Yes", "No")) %>%
mutate(ndvp_offtrack = if_else(ndvp_goalmet != "Yes" &
ndvp_willmeet != "Yes", "Yes", "No")) %>%
mutate(ndvp_status = if_else(
is.na(ndvp_target) | ndvp_target == 0,
"Not captured",
if_else(
is.na(ndvp_deadline),
"No timeline",
if_else(
ndvp_goalmet == "Yes",
"Goal met",
if_else(
ndvp_deadline < Sys.Date(),
"Deadline past",
if_else(
ndvp_ontrack == "Yes",
"On track",
if_else(ndvp_offtrack == "Yes", "Off track",
NA_character_)
)
)
)
)
)) %>%
mutate(ndvp_status_num = if_else(
is.na(ndvp_target) | ndvp_target == 0,
1,
if_else(
is.na(ndvp_deadline),
2,
if_else(
ndvp_goalmet == "Yes",
3,
if_else(
ndvp_deadline < Sys.Date(),
4,
if_else(
ndvp_ontrack == "Yes",
5,
if_else(ndvp_offtrack == "Yes", 6,
NA_real_)
)
)
)
)
)) %>%
mutate(ndvp_rate_needed = if_else(
(((a_pop * ndvp_target) - adm_fv_homo) / as.numeric(ndvp_deadline - as.Date("2022-01-26"))) < 0, 0,
(((a_pop * ndvp_target) - adm_fv_homo) / as.numeric(ndvp_deadline - as.Date("2022-01-26"))))) %>%
mutate(ndvp_scaleup = round((ndvp_rate_needed / dvr_4wk_fv),2)) %>%
mutate(ndvp_scaleup_cat = if_else(
ndvp_scaleup == 0,
"1) Goal met",
if_else(
ndvp_scaleup <= 2,
"2) <2x",
if_else(
ndvp_scaleup <= 5,
"3) 3-5x",
if_else(
ndvp_scaleup <= 10,
"4) 5-10x",
if_else(ndvp_scaleup > 10, "5) >10x",
NA_character_)
)
)
)
))
# Merge concerted support list
a_data <- left_join(a_data, b_csl, by = c("a_iso" = "iso"))
# Add notes
a_data <- a_data %>%
mutate(note_highcov = if_else(cov_total_fv > 0.5, "High fully vaccinated coverage", "No")) %>%
mutate(note_recent_rollout = if_else(intro_date > (Sys.Date() - 60), "Recent rollout", "No")) %>%
mutate(note_reporting_date = if_else(
adm_date < (as.Date("2022-01-18") - 10),
"Likely reporting issue",
NA_character_
)) %>%
mutate(
note_drivers_auto = if_else(
note_reporting_date == "Likely reporting issue",
"Likely reporting issue",
if_else(
note_nochange == 1,
"Likely reporting issue",
if_else(
dvr_4wk_td_per < 0,
"Likely reporting issue",
if_else(
note_highcov == "High fully vaccinated coverage",
"High fully vaccinated coverage",
if_else(
note_recent_rollout == "Recent rollout",
"Recent rollout",
NA_character_
)
)
)
)
)
) %>%
mutate(note_supplyconstraint = if_else(rem_cour_del_per < 0.05 &
pu_used_per > 0.5, 1, 0))
a_data_temp <- select(a_data, c("a_iso","adm_fv","a_pop", "cov_total_fv","t10_status","t40_status"))
a_data <- a_data %>%
mutate(note_drivers = if_else(
is.na(if_else(
is.na(note_drivers_auto),
note_ss_drivers,
if_else(
is.na(note_ss_drivers),
note_drivers_auto,
paste(note_drivers_auto, note_ss_drivers, sep = ", ")
)
)),
"None",
if_else(
is.na(note_drivers_auto),
note_ss_drivers,
if_else(
is.na(note_ss_drivers),
note_drivers_auto,
paste(note_drivers_auto, note_ss_drivers, sep = ", ")
)
)
))
a_data <- a_data %>%
mutate(
cats_a = if_else(
cov_total_fv < 0.1 &
t70_willmeet == "No",
"Country for concerted support",
"Other country"
)
)
# Sort columns
a_data <- a_data %>%
select("a_iso", sort(colnames(.)))
# Create AMC summary table
a_data_amc <- filter(a_data, a_covax_status == "AMC")
a_data_hic <- filter(a_data, a_income_group == "HIC")
# Ranking and binning -----------------------------------------------------
# Coverage fully vaccinated (% pop.)
a_data <- a_data %>%
group_by(a_covax_status) %>%
mutate(cov_total_fv_rank = row_number(cov_total_fv)) %>%
mutate(cov_total_fv_bins = ntile(cov_total_fv_rank, 2))
##4-week average daily vaccination rate (% pop. / day)
a_data <- a_data %>%
group_by(a_covax_status) %>%
mutate(dvr_4wk_td_per_rank = row_number(dvr_4wk_td_per)) %>%
mutate(dvr_4wk_td_per_bins = ntile(dvr_4wk_td_per_rank, 2))
##Supply secured and/or expected (% pop.)
a_data <- a_data %>%
group_by(a_covax_status) %>%
mutate(sec_total_per_rank = row_number(sec_total_per)) %>%
mutate(sec_total_per_bins = ntile(sec_total_per_rank, 2))
##Supply received (% pop.)
a_data <- a_data %>%
group_by(a_covax_status) %>%
mutate(del_cour_total_per_rank = row_number(del_cour_total_per)) %>%
mutate(del_cour_total_per_bins = ntile(del_cour_total_per_rank, 2))
##ISO code
a_data <- a_data %>%
group_by(a_covax_status) %>%
mutate(iso_rank = row_number(a_iso)) %>%
mutate(iso_bins = ntile(iso_rank, 2))
##Product utilization
a_data <- a_data %>%
group_by(a_covax_status) %>%
mutate(pu_used_per_rank = row_number(pu_used_per)) %>%
mutate(pu_used_per_bins = ntile(pu_used_per_rank, 2))
##Short name
a_data <- a_data %>%
group_by(a_covax_status, intro_status) %>%
mutate(iso_vx_rank = row_number(a_name_short)) %>%
mutate(iso_vx_bins = ntile(iso_vx_rank, 4))
##Proportion of supply received from COVAX
a_data <- a_data %>%
group_by(a_covax_status, intro_status) %>%
mutate(del_cour_covax_prop_rank = row_number(del_cour_covax_prop)) %>%
mutate(del_cour_covax_prop_bins = ntile(del_cour_covax_prop_rank, 2))
##Proportion of supply delivered that remains
a_data <- a_data %>%
group_by(a_covax_status, intro_status) %>%
mutate(rem_cour_del_prop_rank = row_number(rem_cour_del_prop)) %>%
mutate(rem_cour_del_prop_bins = ntile(rem_cour_del_prop_rank, 2))
##Supply received since last month (% pop.)
a_data <- a_data %>%
group_by(a_covax_status, intro_status) %>%
mutate(del_cour_since_lm_per_rank = row_number(del_cour_since_lm_per)) %>%
mutate(del_cour_since_lm_per_bins = ntile(del_cour_since_lm_per_rank, 2))
##Proportion of coverage achieved in past month
a_data <- a_data %>%
group_by(a_covax_status, intro_status) %>%
mutate(cov_total_fv_less_1m_rank = row_number(cov_total_fv_less_1m_prop)) %>%
mutate(cov_total_fv_less_1m_bins = ntile(cov_total_fv_less_1m_rank, 2))
##Proportion of secured courses that have been received
a_data <- a_data %>%
group_by(a_covax_status, intro_status) %>%
mutate(sec_del_prop_rank = row_number(sec_del_prop)) %>%
mutate(sec_del_prop_bins = ntile(sec_del_prop_rank, 2))
##Proportion of supply secured from COVAX
a_data <- a_data %>%
group_by(a_covax_status, intro_status) %>%
mutate(sec_covax_prop_rank = row_number(sec_covax_prop)) %>%
mutate(sec_covax_prop_bins = ntile(sec_covax_prop_rank, 2)) %>%
data.frame()
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
View(z_test)
z_test <- a_data %>%
summarize(a_pop_amc = sum(a_pop[a_covax_status == "AMC"]))
z_test <- a_data %>%
summarize(a_pop = sum(a_pop),
a_pop_amc = sum(a_pop[a_covax_status == "AMC"]))
z_test <- a_data %>%
summarize(a_pop = sum(a_pop),
a_pop_amc = sum(a_pop[a_covax_status == "AMC"]),
na.rm = TRUE)
z_test <- a_data %>%
group_by(a_covax_status) %>%
summarize(a_pop_amc = if_else(first(a_covax_status == "AMC"), sum(a_pop)))
z_test <- a_data %>%
group_by(a_covax_status) %>%
summarize(a_pop_amc = if_else(first(a_covax_status == "AMC"), sum(a_pop),
NA))
z_test <- a_data %>%
group_by(a_covax_status) %>%
summarize(a_pop_amc = ifelse(first(a_covax_status == "AMC"), sum(a_pop),
NA))
a_pop_amc = sum(a_pop[a_covax_status == "AMC"])
z_test <- a_data %>%
group_by(a_covax_status) %>%
sumarize(a_pop_tot = sum(a_pop),
a_pop_amc = sum(a_pop[a_covax_status == "AMC"]))
z_test <- a_data %>%
group_by(a_covax_status) %>%
summarize(a_pop_tot = sum(a_pop),
a_pop_amc = sum(a_pop[a_covax_status == "AMC"]))
View(a_data)
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
round((t70_rate_needed / dvr_4wk_fv),2)) %>%
round((t70_rate_needed / dvr_4wk_fv),2)) %>%
## 70% target
a_data <- a_data %>%
mutate(t70_goalmet = if_else(cov_total_fv >= 0.7, "Yes", "No")) %>%
mutate(t70_willmeet = if_else(cov_total_fv_atpace_30jun >= 0.7, "Yes", "No")) %>%
mutate(t70_ontrack = if_else(t70_goalmet != "Yes" &
t70_willmeet == "Yes", "Yes", "No")) %>%
mutate(t70_offtrack = if_else(t70_goalmet != "Yes" &
t70_willmeet != "Yes", "Yes", "No")) %>%
mutate(t70_timeto = round(if_else((((
0.7 * a_pop
) - adm_fv_homo) / (dvr_4wk_fv)) < 0 , 0,
if_else(is.infinite((((0.7 * a_pop) - adm_fv_homo) / (dvr_4wk_fv)
)), NA_real_,
(((0.7 * a_pop) - adm_fv_homo) / (dvr_4wk_fv)
))))) %>%
mutate(t70_status = if_else(
t70_goalmet == "Yes",
"Goal met",
if_else(
t70_ontrack == "Yes",
"On track",
if_else(t70_offtrack == "Yes", "Off track",
NA_character_)
)
)) %>%
mutate(t70_status_num = if_else(
t70_goalmet == "Yes",
1,
if_else(
t70_ontrack == "Yes",
2,
if_else(t70_offtrack == "Yes", 3,
NA_real_)
)
)) %>%
mutate(t70_rate_needed = if_else(
(((a_pop * 0.7) - adm_fv_homo) / as.numeric(as.Date("2022-06-30") - as.Date("2022-01-26"))) < 0, 0,
(((a_pop * 0.7) - adm_fv_homo) / as.numeric(as.Date("2022-06-30") - as.Date("2022-01-26"))))) %>%
mutate(t70_scaleup = if_else(is.infinite(round((t70_rate_needed / dvr_4wk_fv),2)), NA_real_,
round((t70_rate_needed / dvr_4wk_fv),2))) %>%
mutate(t70_scaleup_cat = if_else(
t70_scaleup == 0,
"1) Goal met",
if_else(
t70_scaleup <= 2,
"2) <2x",
if_else(
t70_scaleup <= 5,
"3) 3-5x",
if_else(
t70_scaleup <= 10,
"4) 5-10x",
if_else(t70_scaleup > 10, "5) >10x",
NA_character_)
)
)
)
))
# Calculate linear population coverage projection by 30 June 2022
a_data <- a_data %>%
mutate(cov_total_fv_atpace_30jun = if_else(((adm_fv_homo + (dvr_4wk_fv * (
as.numeric(as.Date("2022-06-30") - Sys.Date())
))) / a_pop) > 1, 1, ((adm_fv_homo + (dvr_4wk_fv * (
as.numeric(as.Date("2022-06-30") - Sys.Date())
))) / a_pop)))
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
a_data %>%
mutate(ndvp_peratpace = (adm_fv_homo + (
dvr_4wk_fv * as.numeric(as.Date(ndvp_deadline) - Sys.Date())
) / a_pop)) %>%
mutate(ndvp_willmeet = if_else(ndvp_peratpace >= ndvp_target, "Yes", "No")) %>%
mutate(ndvp_timeto = round(if_else((((
ndvp_target * a_pop
) - adm_fv_homo) / (dvr_4wk_fv)) < 0 , 0,
if_else(is.infinite((((ndvp_target * a_pop) - adm_fv_homo) / (dvr_4wk_fv)
)), NA_real_,
(((ndvp_target * a_pop) - adm_fv_homo) / (dvr_4wk_fv)
))))) %>%
mutate(ndvp_ontrack = if_else(ndvp_goalmet != "Yes" &
ndvp_willmeet == "Yes", "Yes", "No")) %>%
mutate(ndvp_offtrack = if_else(ndvp_goalmet != "Yes" &
ndvp_willmeet != "Yes", "Yes", "No")) %>%
mutate(ndvp_status = if_else(
is.na(ndvp_target) | ndvp_target == 0,
"Not captured",
if_else(
is.na(ndvp_deadline),
"No timeline",
if_else(
ndvp_goalmet == "Yes",
"Goal met",
if_else(
ndvp_deadline < Sys.Date(),
"Deadline past",
if_else(
ndvp_ontrack == "Yes",
"On track",
if_else(ndvp_offtrack == "Yes", "Off track",
NA_character_)
)
)
)
)
)) %>%
mutate(ndvp_status_num = if_else(
is.na(ndvp_target) | ndvp_target == 0,
1,
if_else(
is.na(ndvp_deadline),
2,
if_else(
ndvp_goalmet == "Yes",
3,
if_else(
ndvp_deadline < Sys.Date(),
4,
if_else(
ndvp_ontrack == "Yes",
5,
if_else(ndvp_offtrack == "Yes", 6,
NA_real_)
)
)
)
)
)) %>%
mutate(ndvp_rate_needed = if_else(
(((a_pop * ndvp_target) - adm_fv_homo) / as.numeric(ndvp_deadline - as.Date("2022-01-26"))) < 0, 0,
(((a_pop * ndvp_target) - adm_fv_homo) / as.numeric(ndvp_deadline - as.Date("2022-01-26"))))) %>%
mutate(ndvp_scaleup = round((ndvp_rate_needed / dvr_4wk_fv),2)) %>%
mutate(ndvp_scaleup_cat = if_else(
ndvp_scaleup == 0,
"1) Goal met",
if_else(
ndvp_scaleup <= 2,
"2) <2x",
if_else(
ndvp_scaleup <= 5,
"3) 3-5x",
if_else(
ndvp_scaleup <= 10,
"4) 5-10x",
if_else(ndvp_scaleup > 10, "5) >10x",
NA_character_)
)
)
)
))
library("readxl")
library("writexl")
library("countrycode")
library("dplyr")
library("lubridate")
library("tidyr")
library("data.table")
a_data %>%
mutate(ndvp_peratpace = (adm_fv_homo + (
dvr_4wk_fv * as.numeric(as.Date(ndvp_deadline) - Sys.Date())
) / a_pop))
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
source("~/GitHub/covid19_vaccination_data/covid19_vaccination_analysis.R", echo=TRUE)
